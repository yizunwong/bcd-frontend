/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * My API
 * The backend API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customFetcher } from "./fetch";
export type CommonResponseDtoData = { [key: string]: unknown };

export interface CommonResponseDto {
  statusCode: number;
  message: string;
  data?: CommonResponseDtoData;
  count?: number;
}

export interface AuthUserResponseDto {
  id: string;
  email: string;
  email_verified: boolean;
  username: string;
  role: string;
  lastSignInAt: string;
  provider: string;
}

export interface LoginResponseDto {
  user: AuthUserResponseDto;
}

export interface LoginDto {
  /** User email address */
  email: string;
  /** Password for the user */
  password: string;
}

export type RegisterDtoRole =
  (typeof RegisterDtoRole)[keyof typeof RegisterDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegisterDtoRole = {
  policyholder: "policyholder",
  insurance_admin: "insurance_admin",
  system_admin: "system_admin",
} as const;

export interface RegisterDto {
  /** User email address */
  email: string;
  /** Password (must include upper, lower, digit) */
  password: string;
  /** Confirm password (must match password) */
  confirmPassword: string;
  firstName?: string;
  lastName?: string;
  role: RegisterDtoRole;
  phone?: string;
  bio?: string;
  employeeId?: string;
  licenseNumber?: string;
  companyName?: string;
  companyAddress?: string;
  dateOfBirth?: string;
  occupation?: string;
  address?: string;
}

export type UserResponseDtoRole =
  (typeof UserResponseDtoRole)[keyof typeof UserResponseDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserResponseDtoRole = {
  policyholder: "policyholder",
  insurance_admin: "insurance_admin",
  system_admin: "system_admin",
} as const;

/**
 * @nullable
 */
export type UserResponseDtoPhone = { [key: string]: unknown } | null;

/**
 * @nullable
 */
export type UserResponseDtoBio = { [key: string]: unknown } | null;

export type UserResponseDtoLastLogin = { [key: string]: unknown };

export type UserResponseDtoJoinedAt = { [key: string]: unknown };

export type UserResponseDtoDetails = { [key: string]: unknown };

export interface UserResponseDto {
  user_id: string;
  email: string;
  name: string;
  role: UserResponseDtoRole;
  /** @nullable */
  phone?: UserResponseDtoPhone;
  /** @nullable */
  bio?: UserResponseDtoBio;
  status: string;
  lastLogin?: UserResponseDtoLastLogin;
  joinedAt?: UserResponseDtoJoinedAt;
  details?: UserResponseDtoDetails;
}

export interface UserStatsResponseDto {
  totalUsers: number;
  activeUsers: number;
  policyholders: number;
  insuranceAdmins: number;
}

export type CreateUserDtoRole =
  (typeof CreateUserDtoRole)[keyof typeof CreateUserDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserDtoRole = {
  policyholder: "policyholder",
  insurance_admin: "insurance_admin",
  system_admin: "system_admin",
} as const;

export interface CreateUserDto {
  firstName?: string;
  lastName?: string;
  email: string;
  password: string;
  role: CreateUserDtoRole;
  phone?: string;
  bio?: string;
  employeeId?: string;
  licenseNumber?: string;
  companyName?: string;
  companyAddress?: string;
  dateOfBirth?: string;
  occupation?: string;
  address?: string;
}

export type UpdateUserDtoRole =
  (typeof UpdateUserDtoRole)[keyof typeof UpdateUserDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserDtoRole = {
  policyholder: "policyholder",
  insurance_admin: "insurance_admin",
  system_admin: "system_admin",
} as const;

export type UpdateUserDtoStatus =
  (typeof UpdateUserDtoStatus)[keyof typeof UpdateUserDtoStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUserDtoStatus = {
  active: "active",
  deactivated: "deactivated",
} as const;

export interface UpdateUserDto {
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  role?: UpdateUserDtoRole;
  phone?: string;
  bio?: string;
  employeeId?: string;
  licenseNumber?: string;
  companyName?: string;
  companyAddress?: string;
  dateOfBirth?: string;
  occupation?: string;
  address?: string;
  status?: UpdateUserDtoStatus;
}

export interface CreateClaimDto {
  /** ID of the policy associated with the claim */
  policy_id: number;
  /** Type of the claim */
  claim_type: string;
  /** Amount claimed */
  amount: number;
  /** Description of the claim */
  description?: string;
  /** Documents to upload */
  documents?: Blob[];
}

export interface ClaimDocumentResponseDto {
  id: number;
  name: string;
  claim_id: number;
  /** Signed Supabase URL for accessing this document */
  signedUrl: string;
}

export type ClaimResponseDtoDescription = { [key: string]: unknown };

export interface ClaimResponseDto {
  id: number;
  claim_type: string;
  amount: number;
  status: string;
  description: ClaimResponseDtoDescription;
  submitted_date: string;
  claim_documents: ClaimDocumentResponseDto[];
}

export interface UpdateClaimDto {
  /** ID of the policy associated with the claim */
  policy_id?: number;
  /** Type of the claim */
  claim_type?: string;
  /** Amount claimed */
  amount?: number;
  /** Description of the claim */
  description?: string;
  /** Documents to upload */
  documents?: Blob[];
  /** ID of the claim to update */
  id: number;
  /** Status of the claim */
  status: string;
}

export interface CreatePolicyDto {
  name: string;
  category: string;
  provider: string;
  coverage: number;
  premium: string;
  rating: number;
  popular: boolean;
  features: string[];
  description?: string;
  /** Files to upload for the policy */
  files?: Blob[];
}

export interface PolicyDocumentResponseDto {
  id: number;
  name: string;
  policy_id: number;
  /** Signed Supabase URL for accessing this document */
  signedUrl: string;
}

export type PolicyResponseDtoDescription = { [key: string]: unknown };

export interface PolicyResponseDto {
  id: number;
  name: string;
  category: string;
  provider: string;
  coverage: number;
  premium: string;
  rating: number;
  popular: boolean;
  description?: PolicyResponseDtoDescription;
  features: string[];
  policy_documents: PolicyDocumentResponseDto[];
}

export interface UpdatePolicyDto {
  name?: string;
  category?: string;
  provider?: string;
  coverage?: number;
  premium?: string;
  rating?: number;
  popular?: boolean;
  features?: string[];
  description?: string;
  /** Files to upload for the policy */
  files?: Blob[];
}

export interface CreateCoverageDto {
  /** ID of the policy this coverage is linked to */
  policy_id: number;
  /** UUID of the user who owns this coverage */
  user_id: string;
  /** Status of the coverage */
  status: string;
  /** Utilization rate of the coverage */
  utilization_rate: number;
  /** Start date of the coverage (YYYY-MM-DD) */
  start_date: string;
  /** End date of the coverage (YYYY-MM-DD) */
  end_date: string;
  /** Next payment date for the coverage (YYYY-MM-DD) */
  next_payment_date: string;
}

export type CoveragePolicyDtoDescription = { [key: string]: unknown };

export interface CoveragePolicyDto {
  name: string;
  description?: CoveragePolicyDtoDescription;
  category: string;
}

export type CoverageResponseDtoPolicyId = { [key: string]: unknown };

export type CoverageResponseDtoUserId = { [key: string]: unknown };

export type CoverageResponseDtoStatus = { [key: string]: unknown };

export interface CoverageResponseDto {
  id: number;
  policy_id?: CoverageResponseDtoPolicyId;
  user_id?: CoverageResponseDtoUserId;
  status?: CoverageResponseDtoStatus;
  utilization_rate: number;
  start_date: string;
  end_date: string;
  next_payment_date: string;
  policies: CoveragePolicyDto;
}

export interface UpdateCoverageDto {
  /** ID of the policy this coverage is linked to */
  policy_id?: number;
  /** UUID of the user who owns this coverage */
  user_id?: string;
  /** Status of the coverage */
  status?: string;
  /** Utilization rate of the coverage */
  utilization_rate?: number;
  /** Start date of the coverage (YYYY-MM-DD) */
  start_date?: string;
  /** End date of the coverage (YYYY-MM-DD) */
  end_date?: string;
  /** Next payment date for the coverage (YYYY-MM-DD) */
  next_payment_date?: string;
}

export interface ExtractClaimDto {
  /** Documents to upload */
  file?: Blob[];
}

export interface CreateReviewDto {
  /** Rating from 1 to 5 */
  rating: number;
  comment?: string;
}

export type AuthControllerLogin200AllOf = {
  data?: LoginResponseDto;
};

export type AuthControllerLogin200 = CommonResponseDto &
  AuthControllerLogin200AllOf;

export type AuthControllerGetMe200AllOf = {
  data?: AuthUserResponseDto;
};

export type AuthControllerGetMe200 = CommonResponseDto &
  AuthControllerGetMe200AllOf;

export type UserControllerFindAll200AllOf = {
  data?: UserResponseDto[];
};

export type UserControllerFindAll200 = CommonResponseDto &
  UserControllerFindAll200AllOf;

export type UserControllerCreate200AllOf = {
  data?: UserResponseDto;
};

export type UserControllerCreate200 = CommonResponseDto &
  UserControllerCreate200AllOf;

export type UserControllerGetStats200AllOf = {
  data?: UserStatsResponseDto;
};

export type UserControllerGetStats200 = CommonResponseDto &
  UserControllerGetStats200AllOf;

export type UserControllerFindOne200AllOf = {
  data?: UserResponseDto;
};

export type UserControllerFindOne200 = CommonResponseDto &
  UserControllerFindOne200AllOf;

export type UserControllerUpdate200AllOf = {
  data?: UserResponseDto;
};

export type UserControllerUpdate200 = CommonResponseDto &
  UserControllerUpdate200AllOf;

export type ClaimControllerFindAllParams = {
  page?: number;
  limit?: number;
  /**
   * Filter by claim type (category)
   */
  category?: string;
  /**
   * Search keyword for claim_type or description
   */
  search?: string;
  sortBy?: ClaimControllerFindAllSortBy;
  sortOrder?: ClaimControllerFindAllSortOrder;
};

export type ClaimControllerFindAllSortBy =
  (typeof ClaimControllerFindAllSortBy)[keyof typeof ClaimControllerFindAllSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimControllerFindAllSortBy = {
  id: "id",
  claim_type: "claim_type",
  amount: "amount",
  status: "status",
  submitted_date: "submitted_date",
} as const;

export type ClaimControllerFindAllSortOrder =
  (typeof ClaimControllerFindAllSortOrder)[keyof typeof ClaimControllerFindAllSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClaimControllerFindAllSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type ClaimControllerFindAll200AllOf = {
  data?: ClaimResponseDto[];
};

export type ClaimControllerFindAll200 = CommonResponseDto &
  ClaimControllerFindAll200AllOf;

export type ClaimControllerFindOne200AllOf = {
  data?: ClaimResponseDto;
};

export type ClaimControllerFindOne200 = CommonResponseDto &
  ClaimControllerFindOne200AllOf;

export type ClaimControllerUpdate200AllOf = {
  data?: ClaimResponseDto;
};

export type ClaimControllerUpdate200 = CommonResponseDto &
  ClaimControllerUpdate200AllOf;

export type ClaimControllerRemove200AllOf = {
  data?: ClaimResponseDto;
};

export type ClaimControllerRemove200 = CommonResponseDto &
  ClaimControllerRemove200AllOf;

export type ClaimControllerUpdateClaimStatus200AllOf = {
  data?: ClaimResponseDto;
};

export type ClaimControllerUpdateClaimStatus200 = CommonResponseDto &
  ClaimControllerUpdateClaimStatus200AllOf;

export type ClaimControllerRemoveFile200AllOf = {
  data?: ClaimResponseDto;
};

export type ClaimControllerRemoveFile200 = CommonResponseDto &
  ClaimControllerRemoveFile200AllOf;

export type PolicyControllerFindAllParams = {
  page?: number;
  limit?: number;
  /**
   * Filter by policy category
   */
  category?: string;
  /**
   * Search keyword for name or description
   */
  search?: string;
  sortBy?: PolicyControllerFindAllSortBy;
  sortOrder?: PolicyControllerFindAllSortOrder;
};

export type PolicyControllerFindAllSortBy =
  (typeof PolicyControllerFindAllSortBy)[keyof typeof PolicyControllerFindAllSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PolicyControllerFindAllSortBy = {
  id: "id",
  name: "name",
  rating: "rating",
  premium: "premium",
  popularity: "popularity",
} as const;

export type PolicyControllerFindAllSortOrder =
  (typeof PolicyControllerFindAllSortOrder)[keyof typeof PolicyControllerFindAllSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PolicyControllerFindAllSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type PolicyControllerFindAll200AllOf = {
  data?: PolicyResponseDto[];
};

export type PolicyControllerFindAll200 = CommonResponseDto &
  PolicyControllerFindAll200AllOf;

export type PolicyControllerFindOne200AllOf = {
  data?: PolicyResponseDto;
};

export type PolicyControllerFindOne200 = CommonResponseDto &
  PolicyControllerFindOne200AllOf;

export type PolicyControllerUpdate200AllOf = {
  data?: PolicyResponseDto;
};

export type PolicyControllerUpdate200 = CommonResponseDto &
  PolicyControllerUpdate200AllOf;

export type PolicyControllerRemove200AllOf = {
  data?: PolicyResponseDto;
};

export type PolicyControllerRemove200 = CommonResponseDto &
  PolicyControllerRemove200AllOf;

export type PolicyControllerGetCategoryCountsParams = {
  userId: string;
};

export type CoverageControllerFindAllParams = {
  page?: number;
  limit?: number;
  /**
   * Filter by policy category
   */
  category?: string;
  /**
   * Search keyword for policy name or description
   */
  search?: string;
  status?: CoverageControllerFindAllStatus;
  sortBy?: CoverageControllerFindAllSortBy;
  sortOrder?: CoverageControllerFindAllSortOrder;
};

export type CoverageControllerFindAllStatus =
  (typeof CoverageControllerFindAllStatus)[keyof typeof CoverageControllerFindAllStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoverageControllerFindAllStatus = {
  active: "active",
  limitExceeded: "limitExceeded",
  expired: "expired",
  suspended: "suspended",
} as const;

export type CoverageControllerFindAllSortBy =
  (typeof CoverageControllerFindAllSortBy)[keyof typeof CoverageControllerFindAllSortBy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoverageControllerFindAllSortBy = {
  id: "id",
  start_date: "start_date",
  utilization_rate: "utilization_rate",
} as const;

export type CoverageControllerFindAllSortOrder =
  (typeof CoverageControllerFindAllSortOrder)[keyof typeof CoverageControllerFindAllSortOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoverageControllerFindAllSortOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export type CoverageControllerFindAll200AllOf = {
  data?: CoverageResponseDto[];
};

export type CoverageControllerFindAll200 = CommonResponseDto &
  CoverageControllerFindAll200AllOf;

export type CoverageControllerFindOne200AllOf = {
  data?: CoverageResponseDto;
};

export type CoverageControllerFindOne200 = CommonResponseDto &
  CoverageControllerFindOne200AllOf;

export const authControllerLogin = (
  loginDto: LoginDto,
  signal?: AbortSignal,
) => {
  return customFetcher<AuthControllerLogin200>({
    url: `/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginDto,
    signal,
  });
};

export const getAuthControllerLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationKey = ["authControllerLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginDto;
export type AuthControllerLoginMutationError = unknown;

export const useAuthControllerLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLogin>>,
      TError,
      { data: LoginDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const authControllerRegister = (
  registerDto: RegisterDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerDto,
    signal,
  });
};

export const getAuthControllerRegisterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: RegisterDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: RegisterDto },
  TContext
> => {
  const mutationKey = ["authControllerRegister"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegister>>,
    { data: RegisterDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegister(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>;
export type AuthControllerRegisterMutationBody = RegisterDto;
export type AuthControllerRegisterMutationError = unknown;

export const useAuthControllerRegister = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerRegister>>,
      TError,
      { data: RegisterDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: RegisterDto },
  TContext
> => {
  const mutationOptions = getAuthControllerRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const authControllerGetMe = (signal?: AbortSignal) => {
  return customFetcher<AuthControllerGetMe200>({
    url: `/auth/me`,
    method: "GET",
    signal,
  });
};

export const getAuthControllerGetMeQueryKey = () => {
  return [`/auth/me`] as const;
};

export const getAuthControllerGetMeQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGetMe>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerGetMe>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerGetMeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerGetMe>>
  > = ({ signal }) => authControllerGetMe(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGetMe>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerGetMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetMe>>
>;
export type AuthControllerGetMeQueryError = unknown;

export function useAuthControllerGetMe<
  TData = Awaited<ReturnType<typeof authControllerGetMe>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGetMe>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetMe>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetMe>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGetMe<
  TData = Awaited<ReturnType<typeof authControllerGetMe>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGetMe>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetMe>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetMe>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerGetMe<
  TData = Awaited<ReturnType<typeof authControllerGetMe>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGetMe>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAuthControllerGetMe<
  TData = Awaited<ReturnType<typeof authControllerGetMe>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerGetMe>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAuthControllerGetMeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const userControllerFindAll = (signal?: AbortSignal) => {
  return customFetcher<UserControllerFindAll200>({
    url: `/users`,
    method: "GET",
    signal,
  });
};

export const getUserControllerFindAllQueryKey = () => {
  return [`/users`] as const;
};

export const getUserControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerFindAll>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerFindAll>>
  > = ({ signal }) => userControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindAll>>
>;
export type UserControllerFindAllQueryError = unknown;

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const userControllerCreate = (
  createUserDto: CreateUserDto,
  signal?: AbortSignal,
) => {
  return customFetcher<UserControllerCreate200>({
    url: `/users`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createUserDto,
    signal,
  });
};

export const getUserControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerCreate>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ["userControllerCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerCreate>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerCreate>>
>;
export type UserControllerCreateMutationBody = CreateUserDto;
export type UserControllerCreateMutationError = unknown;

export const useUserControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerCreate>>,
      TError,
      { data: CreateUserDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerCreate>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getUserControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const userControllerGetStats = (signal?: AbortSignal) => {
  return customFetcher<UserControllerGetStats200>({
    url: `/users/stats`,
    method: "GET",
    signal,
  });
};

export const getUserControllerGetStatsQueryKey = () => {
  return [`/users/stats`] as const;
};

export const getUserControllerGetStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetStats>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerGetStats>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerGetStatsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetStats>>
  > = ({ signal }) => userControllerGetStats(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetStats>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerGetStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetStats>>
>;
export type UserControllerGetStatsQueryError = unknown;

export function useUserControllerGetStats<
  TData = Awaited<ReturnType<typeof userControllerGetStats>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetStats>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetStats>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetStats>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetStats<
  TData = Awaited<ReturnType<typeof userControllerGetStats>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetStats>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetStats>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetStats>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetStats<
  TData = Awaited<ReturnType<typeof userControllerGetStats>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetStats>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useUserControllerGetStats<
  TData = Awaited<ReturnType<typeof userControllerGetStats>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetStats>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerGetStatsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const userControllerFindOne = (id: string, signal?: AbortSignal) => {
  return customFetcher<UserControllerFindOne200>({
    url: `/users/${id}`,
    method: "GET",
    signal,
  });
};

export const getUserControllerFindOneQueryKey = (id: string) => {
  return [`/users/${id}`] as const;
};

export const getUserControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerFindOne>>
  > = ({ signal }) => userControllerFindOne(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindOne>>
>;
export type UserControllerFindOneQueryError = unknown;

export function useUserControllerFindOne<
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindOne<
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerFindOne<
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useUserControllerFindOne<
  TData = Awaited<ReturnType<typeof userControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const userControllerUpdate = (
  id: string,
  updateUserDto: UpdateUserDto,
) => {
  return customFetcher<UserControllerUpdate200>({
    url: `/users/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateUserDto,
  });
};

export const getUserControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUpdate>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerUpdate>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationKey = ["userControllerUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerUpdate>>,
    { id: string; data: UpdateUserDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return userControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUpdate>>
>;
export type UserControllerUpdateMutationBody = UpdateUserDto;
export type UserControllerUpdateMutationError = unknown;

export const useUserControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerUpdate>>,
      TError,
      { id: string; data: UpdateUserDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerUpdate>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationOptions = getUserControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const claimControllerCreate = (
  createClaimDto: CreateClaimDto,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append(`policy_id`, createClaimDto.policy_id.toString());
  formData.append(`claim_type`, createClaimDto.claim_type);
  formData.append(`amount`, createClaimDto.amount.toString());
  if (createClaimDto.description !== undefined) {
    formData.append(`description`, createClaimDto.description);
  }
  if (createClaimDto.documents !== undefined) {
    createClaimDto.documents.forEach((value) =>
      formData.append(`documents`, value),
    );
  }

  return customFetcher<void>({
    url: `/claim`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getClaimControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof claimControllerCreate>>,
    TError,
    { data: CreateClaimDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof claimControllerCreate>>,
  TError,
  { data: CreateClaimDto },
  TContext
> => {
  const mutationKey = ["claimControllerCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof claimControllerCreate>>,
    { data: CreateClaimDto }
  > = (props) => {
    const { data } = props ?? {};

    return claimControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClaimControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof claimControllerCreate>>
>;
export type ClaimControllerCreateMutationBody = CreateClaimDto;
export type ClaimControllerCreateMutationError = unknown;

export const useClaimControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof claimControllerCreate>>,
      TError,
      { data: CreateClaimDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof claimControllerCreate>>,
  TError,
  { data: CreateClaimDto },
  TContext
> => {
  const mutationOptions = getClaimControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const claimControllerFindAll = (
  params?: ClaimControllerFindAllParams,
  signal?: AbortSignal,
) => {
  return customFetcher<ClaimControllerFindAll200>({
    url: `/claim`,
    method: "GET",
    params,
    signal,
  });
};

export const getClaimControllerFindAllQueryKey = (
  params?: ClaimControllerFindAllParams,
) => {
  return [`/claim`, ...(params ? [params] : [])] as const;
};

export const getClaimControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof claimControllerFindAll>>,
  TError = unknown,
>(
  params?: ClaimControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof claimControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getClaimControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof claimControllerFindAll>>
  > = ({ signal }) => claimControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof claimControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ClaimControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof claimControllerFindAll>>
>;
export type ClaimControllerFindAllQueryError = unknown;

export function useClaimControllerFindAll<
  TData = Awaited<ReturnType<typeof claimControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | ClaimControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof claimControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof claimControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof claimControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useClaimControllerFindAll<
  TData = Awaited<ReturnType<typeof claimControllerFindAll>>,
  TError = unknown,
>(
  params?: ClaimControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof claimControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof claimControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof claimControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useClaimControllerFindAll<
  TData = Awaited<ReturnType<typeof claimControllerFindAll>>,
  TError = unknown,
>(
  params?: ClaimControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof claimControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useClaimControllerFindAll<
  TData = Awaited<ReturnType<typeof claimControllerFindAll>>,
  TError = unknown,
>(
  params?: ClaimControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof claimControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getClaimControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const claimControllerFindOne = (id: string, signal?: AbortSignal) => {
  return customFetcher<ClaimControllerFindOne200>({
    url: `/claim/${id}`,
    method: "GET",
    signal,
  });
};

export const getClaimControllerFindOneQueryKey = (id: string) => {
  return [`/claim/${id}`] as const;
};

export const getClaimControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof claimControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof claimControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getClaimControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof claimControllerFindOne>>
  > = ({ signal }) => claimControllerFindOne(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof claimControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ClaimControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof claimControllerFindOne>>
>;
export type ClaimControllerFindOneQueryError = unknown;

export function useClaimControllerFindOne<
  TData = Awaited<ReturnType<typeof claimControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof claimControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof claimControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof claimControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useClaimControllerFindOne<
  TData = Awaited<ReturnType<typeof claimControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof claimControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof claimControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof claimControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useClaimControllerFindOne<
  TData = Awaited<ReturnType<typeof claimControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof claimControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useClaimControllerFindOne<
  TData = Awaited<ReturnType<typeof claimControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof claimControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getClaimControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const claimControllerUpdate = (
  id: string,
  updateClaimDto: UpdateClaimDto,
) => {
  return customFetcher<ClaimControllerUpdate200>({
    url: `/claim/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateClaimDto,
  });
};

export const getClaimControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof claimControllerUpdate>>,
    TError,
    { id: string; data: UpdateClaimDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof claimControllerUpdate>>,
  TError,
  { id: string; data: UpdateClaimDto },
  TContext
> => {
  const mutationKey = ["claimControllerUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof claimControllerUpdate>>,
    { id: string; data: UpdateClaimDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return claimControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClaimControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof claimControllerUpdate>>
>;
export type ClaimControllerUpdateMutationBody = UpdateClaimDto;
export type ClaimControllerUpdateMutationError = unknown;

export const useClaimControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof claimControllerUpdate>>,
      TError,
      { id: string; data: UpdateClaimDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof claimControllerUpdate>>,
  TError,
  { id: string; data: UpdateClaimDto },
  TContext
> => {
  const mutationOptions = getClaimControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const claimControllerRemove = (id: string) => {
  return customFetcher<ClaimControllerRemove200>({
    url: `/claim/${id}`,
    method: "DELETE",
  });
};

export const getClaimControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof claimControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof claimControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["claimControllerRemove"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof claimControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return claimControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClaimControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof claimControllerRemove>>
>;

export type ClaimControllerRemoveMutationError = unknown;

export const useClaimControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof claimControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof claimControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getClaimControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const claimControllerUpdateClaimStatus = (
  id: string,
  status: "pending" | "approved" | "rejected" | "claimed",
) => {
  return customFetcher<ClaimControllerUpdateClaimStatus200>({
    url: `/claim/${id}/${status}`,
    method: "PATCH",
  });
};

export const getClaimControllerUpdateClaimStatusMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof claimControllerUpdateClaimStatus>>,
    TError,
    { id: string; status: "pending" | "approved" | "rejected" | "claimed" },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof claimControllerUpdateClaimStatus>>,
  TError,
  { id: string; status: "pending" | "approved" | "rejected" | "claimed" },
  TContext
> => {
  const mutationKey = ["claimControllerUpdateClaimStatus"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof claimControllerUpdateClaimStatus>>,
    { id: string; status: "pending" | "approved" | "rejected" | "claimed" }
  > = (props) => {
    const { id, status } = props ?? {};

    return claimControllerUpdateClaimStatus(id, status);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClaimControllerUpdateClaimStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof claimControllerUpdateClaimStatus>>
>;

export type ClaimControllerUpdateClaimStatusMutationError = unknown;

export const useClaimControllerUpdateClaimStatus = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof claimControllerUpdateClaimStatus>>,
      TError,
      { id: string; status: "pending" | "approved" | "rejected" | "claimed" },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof claimControllerUpdateClaimStatus>>,
  TError,
  { id: string; status: "pending" | "approved" | "rejected" | "claimed" },
  TContext
> => {
  const mutationOptions =
    getClaimControllerUpdateClaimStatusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const claimControllerRemoveFile = (id: string) => {
  return customFetcher<ClaimControllerRemoveFile200>({
    url: `/claim/${id}/file`,
    method: "DELETE",
  });
};

export const getClaimControllerRemoveFileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof claimControllerRemoveFile>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof claimControllerRemoveFile>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["claimControllerRemoveFile"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof claimControllerRemoveFile>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return claimControllerRemoveFile(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ClaimControllerRemoveFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof claimControllerRemoveFile>>
>;

export type ClaimControllerRemoveFileMutationError = unknown;

export const useClaimControllerRemoveFile = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof claimControllerRemoveFile>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof claimControllerRemoveFile>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getClaimControllerRemoveFileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const policyControllerCreate = (
  createPolicyDto: CreatePolicyDto,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  formData.append(`name`, createPolicyDto.name);
  formData.append(`category`, createPolicyDto.category);
  formData.append(`provider`, createPolicyDto.provider);
  formData.append(`coverage`, createPolicyDto.coverage.toString());
  formData.append(`premium`, createPolicyDto.premium);
  formData.append(`rating`, createPolicyDto.rating.toString());
  formData.append(`popular`, createPolicyDto.popular.toString());
  createPolicyDto.features.forEach((value) =>
    formData.append(`features`, value),
  );
  if (createPolicyDto.description !== undefined) {
    formData.append(`description`, createPolicyDto.description);
  }
  if (createPolicyDto.files !== undefined) {
    createPolicyDto.files.forEach((value) => formData.append(`files`, value));
  }

  return customFetcher<void>({
    url: `/policy`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getPolicyControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof policyControllerCreate>>,
    TError,
    { data: CreatePolicyDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof policyControllerCreate>>,
  TError,
  { data: CreatePolicyDto },
  TContext
> => {
  const mutationKey = ["policyControllerCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof policyControllerCreate>>,
    { data: CreatePolicyDto }
  > = (props) => {
    const { data } = props ?? {};

    return policyControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PolicyControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof policyControllerCreate>>
>;
export type PolicyControllerCreateMutationBody = CreatePolicyDto;
export type PolicyControllerCreateMutationError = unknown;

export const usePolicyControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof policyControllerCreate>>,
      TError,
      { data: CreatePolicyDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof policyControllerCreate>>,
  TError,
  { data: CreatePolicyDto },
  TContext
> => {
  const mutationOptions = getPolicyControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const policyControllerFindAll = (
  params?: PolicyControllerFindAllParams,
  signal?: AbortSignal,
) => {
  return customFetcher<PolicyControllerFindAll200>({
    url: `/policy`,
    method: "GET",
    params,
    signal,
  });
};

export const getPolicyControllerFindAllQueryKey = (
  params?: PolicyControllerFindAllParams,
) => {
  return [`/policy`, ...(params ? [params] : [])] as const;
};

export const getPolicyControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof policyControllerFindAll>>,
  TError = unknown,
>(
  params?: PolicyControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPolicyControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof policyControllerFindAll>>
  > = ({ signal }) => policyControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof policyControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PolicyControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof policyControllerFindAll>>
>;
export type PolicyControllerFindAllQueryError = unknown;

export function usePolicyControllerFindAll<
  TData = Awaited<ReturnType<typeof policyControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | PolicyControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof policyControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof policyControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePolicyControllerFindAll<
  TData = Awaited<ReturnType<typeof policyControllerFindAll>>,
  TError = unknown,
>(
  params?: PolicyControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof policyControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof policyControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePolicyControllerFindAll<
  TData = Awaited<ReturnType<typeof policyControllerFindAll>>,
  TError = unknown,
>(
  params?: PolicyControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function usePolicyControllerFindAll<
  TData = Awaited<ReturnType<typeof policyControllerFindAll>>,
  TError = unknown,
>(
  params?: PolicyControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPolicyControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const policyControllerFindOne = (id: string, signal?: AbortSignal) => {
  return customFetcher<PolicyControllerFindOne200>({
    url: `/policy/${id}`,
    method: "GET",
    signal,
  });
};

export const getPolicyControllerFindOneQueryKey = (id: string) => {
  return [`/policy/${id}`] as const;
};

export const getPolicyControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof policyControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPolicyControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof policyControllerFindOne>>
  > = ({ signal }) => policyControllerFindOne(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof policyControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PolicyControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof policyControllerFindOne>>
>;
export type PolicyControllerFindOneQueryError = unknown;

export function usePolicyControllerFindOne<
  TData = Awaited<ReturnType<typeof policyControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof policyControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof policyControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePolicyControllerFindOne<
  TData = Awaited<ReturnType<typeof policyControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof policyControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof policyControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePolicyControllerFindOne<
  TData = Awaited<ReturnType<typeof policyControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function usePolicyControllerFindOne<
  TData = Awaited<ReturnType<typeof policyControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPolicyControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const policyControllerUpdate = (
  id: string,
  updatePolicyDto: UpdatePolicyDto,
) => {
  return customFetcher<PolicyControllerUpdate200>({
    url: `/policy/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updatePolicyDto,
  });
};

export const getPolicyControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof policyControllerUpdate>>,
    TError,
    { id: string; data: UpdatePolicyDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof policyControllerUpdate>>,
  TError,
  { id: string; data: UpdatePolicyDto },
  TContext
> => {
  const mutationKey = ["policyControllerUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof policyControllerUpdate>>,
    { id: string; data: UpdatePolicyDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return policyControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PolicyControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof policyControllerUpdate>>
>;
export type PolicyControllerUpdateMutationBody = UpdatePolicyDto;
export type PolicyControllerUpdateMutationError = unknown;

export const usePolicyControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof policyControllerUpdate>>,
      TError,
      { id: string; data: UpdatePolicyDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof policyControllerUpdate>>,
  TError,
  { id: string; data: UpdatePolicyDto },
  TContext
> => {
  const mutationOptions = getPolicyControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const policyControllerRemove = (id: string) => {
  return customFetcher<PolicyControllerRemove200>({
    url: `/policy/${id}`,
    method: "DELETE",
  });
};

export const getPolicyControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof policyControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof policyControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["policyControllerRemove"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof policyControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return policyControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PolicyControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof policyControllerRemove>>
>;

export type PolicyControllerRemoveMutationError = unknown;

export const usePolicyControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof policyControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof policyControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getPolicyControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const policyControllerGetSummary = (
  userId: string,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/policy/dashboard/policyholder/${userId}/summary`,
    method: "GET",
    signal,
  });
};

export const getPolicyControllerGetSummaryQueryKey = (userId: string) => {
  return [`/policy/dashboard/policyholder/${userId}/summary`] as const;
};

export const getPolicyControllerGetSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof policyControllerGetSummary>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerGetSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPolicyControllerGetSummaryQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof policyControllerGetSummary>>
  > = ({ signal }) => policyControllerGetSummary(userId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof policyControllerGetSummary>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PolicyControllerGetSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof policyControllerGetSummary>>
>;
export type PolicyControllerGetSummaryQueryError = unknown;

export function usePolicyControllerGetSummary<
  TData = Awaited<ReturnType<typeof policyControllerGetSummary>>,
  TError = unknown,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerGetSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof policyControllerGetSummary>>,
          TError,
          Awaited<ReturnType<typeof policyControllerGetSummary>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePolicyControllerGetSummary<
  TData = Awaited<ReturnType<typeof policyControllerGetSummary>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerGetSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof policyControllerGetSummary>>,
          TError,
          Awaited<ReturnType<typeof policyControllerGetSummary>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePolicyControllerGetSummary<
  TData = Awaited<ReturnType<typeof policyControllerGetSummary>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerGetSummary>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function usePolicyControllerGetSummary<
  TData = Awaited<ReturnType<typeof policyControllerGetSummary>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerGetSummary>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPolicyControllerGetSummaryQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const policyControllerGetCategoryCounts = (
  params: PolicyControllerGetCategoryCountsParams,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/policy/browse/categories`,
    method: "GET",
    params,
    signal,
  });
};

export const getPolicyControllerGetCategoryCountsQueryKey = (
  params: PolicyControllerGetCategoryCountsParams,
) => {
  return [`/policy/browse/categories`, ...(params ? [params] : [])] as const;
};

export const getPolicyControllerGetCategoryCountsQueryOptions = <
  TData = Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
  TError = unknown,
>(
  params: PolicyControllerGetCategoryCountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getPolicyControllerGetCategoryCountsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>
  > = ({ signal }) => policyControllerGetCategoryCounts(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type PolicyControllerGetCategoryCountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>
>;
export type PolicyControllerGetCategoryCountsQueryError = unknown;

export function usePolicyControllerGetCategoryCounts<
  TData = Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
  TError = unknown,
>(
  params: PolicyControllerGetCategoryCountsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
          TError,
          Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePolicyControllerGetCategoryCounts<
  TData = Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
  TError = unknown,
>(
  params: PolicyControllerGetCategoryCountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
          TError,
          Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function usePolicyControllerGetCategoryCounts<
  TData = Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
  TError = unknown,
>(
  params: PolicyControllerGetCategoryCountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function usePolicyControllerGetCategoryCounts<
  TData = Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
  TError = unknown,
>(
  params: PolicyControllerGetCategoryCountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof policyControllerGetCategoryCounts>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getPolicyControllerGetCategoryCountsQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const coverageControllerCreate = (
  createCoverageDto: CreateCoverageDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/coverage`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createCoverageDto,
    signal,
  });
};

export const getCoverageControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof coverageControllerCreate>>,
    TError,
    { data: CreateCoverageDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof coverageControllerCreate>>,
  TError,
  { data: CreateCoverageDto },
  TContext
> => {
  const mutationKey = ["coverageControllerCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof coverageControllerCreate>>,
    { data: CreateCoverageDto }
  > = (props) => {
    const { data } = props ?? {};

    return coverageControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CoverageControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof coverageControllerCreate>>
>;
export type CoverageControllerCreateMutationBody = CreateCoverageDto;
export type CoverageControllerCreateMutationError = unknown;

export const useCoverageControllerCreate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof coverageControllerCreate>>,
      TError,
      { data: CreateCoverageDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof coverageControllerCreate>>,
  TError,
  { data: CreateCoverageDto },
  TContext
> => {
  const mutationOptions = getCoverageControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const coverageControllerFindAll = (
  params?: CoverageControllerFindAllParams,
  signal?: AbortSignal,
) => {
  return customFetcher<CoverageControllerFindAll200>({
    url: `/coverage`,
    method: "GET",
    params,
    signal,
  });
};

export const getCoverageControllerFindAllQueryKey = (
  params?: CoverageControllerFindAllParams,
) => {
  return [`/coverage`, ...(params ? [params] : [])] as const;
};

export const getCoverageControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof coverageControllerFindAll>>,
  TError = unknown,
>(
  params?: CoverageControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCoverageControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof coverageControllerFindAll>>
  > = ({ signal }) => coverageControllerFindAll(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof coverageControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CoverageControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof coverageControllerFindAll>>
>;
export type CoverageControllerFindAllQueryError = unknown;

export function useCoverageControllerFindAll<
  TData = Awaited<ReturnType<typeof coverageControllerFindAll>>,
  TError = unknown,
>(
  params: undefined | CoverageControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof coverageControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof coverageControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCoverageControllerFindAll<
  TData = Awaited<ReturnType<typeof coverageControllerFindAll>>,
  TError = unknown,
>(
  params?: CoverageControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof coverageControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof coverageControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCoverageControllerFindAll<
  TData = Awaited<ReturnType<typeof coverageControllerFindAll>>,
  TError = unknown,
>(
  params?: CoverageControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useCoverageControllerFindAll<
  TData = Awaited<ReturnType<typeof coverageControllerFindAll>>,
  TError = unknown,
>(
  params?: CoverageControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCoverageControllerFindAllQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const coverageControllerFindOne = (id: string, signal?: AbortSignal) => {
  return customFetcher<CoverageControllerFindOne200>({
    url: `/coverage/${id}`,
    method: "GET",
    signal,
  });
};

export const getCoverageControllerFindOneQueryKey = (id: string) => {
  return [`/coverage/${id}`] as const;
};

export const getCoverageControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof coverageControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCoverageControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof coverageControllerFindOne>>
  > = ({ signal }) => coverageControllerFindOne(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof coverageControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CoverageControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof coverageControllerFindOne>>
>;
export type CoverageControllerFindOneQueryError = unknown;

export function useCoverageControllerFindOne<
  TData = Awaited<ReturnType<typeof coverageControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof coverageControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof coverageControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCoverageControllerFindOne<
  TData = Awaited<ReturnType<typeof coverageControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof coverageControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof coverageControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCoverageControllerFindOne<
  TData = Awaited<ReturnType<typeof coverageControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useCoverageControllerFindOne<
  TData = Awaited<ReturnType<typeof coverageControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCoverageControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const coverageControllerUpdate = (
  id: string,
  updateCoverageDto: UpdateCoverageDto,
) => {
  return customFetcher<void>({
    url: `/coverage/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateCoverageDto,
  });
};

export const getCoverageControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof coverageControllerUpdate>>,
    TError,
    { id: string; data: UpdateCoverageDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof coverageControllerUpdate>>,
  TError,
  { id: string; data: UpdateCoverageDto },
  TContext
> => {
  const mutationKey = ["coverageControllerUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof coverageControllerUpdate>>,
    { id: string; data: UpdateCoverageDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return coverageControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CoverageControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof coverageControllerUpdate>>
>;
export type CoverageControllerUpdateMutationBody = UpdateCoverageDto;
export type CoverageControllerUpdateMutationError = unknown;

export const useCoverageControllerUpdate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof coverageControllerUpdate>>,
      TError,
      { id: string; data: UpdateCoverageDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof coverageControllerUpdate>>,
  TError,
  { id: string; data: UpdateCoverageDto },
  TContext
> => {
  const mutationOptions = getCoverageControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const coverageControllerRemove = (id: string) => {
  return customFetcher<void>({ url: `/coverage/${id}`, method: "DELETE" });
};

export const getCoverageControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof coverageControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof coverageControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["coverageControllerRemove"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof coverageControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return coverageControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type CoverageControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof coverageControllerRemove>>
>;

export type CoverageControllerRemoveMutationError = unknown;

export const useCoverageControllerRemove = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof coverageControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof coverageControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getCoverageControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const coverageControllerGetPolicyholderSummary = (
  userId: string,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/coverage/policyholder/${userId}/summary`,
    method: "GET",
    signal,
  });
};

export const getCoverageControllerGetPolicyholderSummaryQueryKey = (
  userId: string,
) => {
  return [`/coverage/policyholder/${userId}/summary`] as const;
};

export const getCoverageControllerGetPolicyholderSummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCoverageControllerGetPolicyholderSummaryQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>
  > = ({ signal }) => coverageControllerGetPolicyholderSummary(userId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CoverageControllerGetPolicyholderSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>
>;
export type CoverageControllerGetPolicyholderSummaryQueryError = unknown;

export function useCoverageControllerGetPolicyholderSummary<
  TData = Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
  TError = unknown,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
          TError,
          Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCoverageControllerGetPolicyholderSummary<
  TData = Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
          TError,
          Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCoverageControllerGetPolicyholderSummary<
  TData = Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useCoverageControllerGetPolicyholderSummary<
  TData = Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
  TError = unknown,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof coverageControllerGetPolicyholderSummary>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCoverageControllerGetPolicyholderSummaryQueryOptions(
    userId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const pdfClaimExtractorControllerExtract = (
  extractClaimDto: ExtractClaimDto,
  signal?: AbortSignal,
) => {
  const formData = new FormData();
  if (extractClaimDto.file !== undefined) {
    extractClaimDto.file.forEach((value) => formData.append(`file`, value));
  }

  return customFetcher<void>({
    url: `/claim-type-extractor`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getPdfClaimExtractorControllerExtractMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pdfClaimExtractorControllerExtract>>,
    TError,
    { data: ExtractClaimDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pdfClaimExtractorControllerExtract>>,
  TError,
  { data: ExtractClaimDto },
  TContext
> => {
  const mutationKey = ["pdfClaimExtractorControllerExtract"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pdfClaimExtractorControllerExtract>>,
    { data: ExtractClaimDto }
  > = (props) => {
    const { data } = props ?? {};

    return pdfClaimExtractorControllerExtract(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PdfClaimExtractorControllerExtractMutationResult = NonNullable<
  Awaited<ReturnType<typeof pdfClaimExtractorControllerExtract>>
>;
export type PdfClaimExtractorControllerExtractMutationBody = ExtractClaimDto;
export type PdfClaimExtractorControllerExtractMutationError = unknown;

export const usePdfClaimExtractorControllerExtract = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof pdfClaimExtractorControllerExtract>>,
      TError,
      { data: ExtractClaimDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof pdfClaimExtractorControllerExtract>>,
  TError,
  { data: ExtractClaimDto },
  TContext
> => {
  const mutationOptions =
    getPdfClaimExtractorControllerExtractMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const reviewsControllerLeaveReview = (
  id: string,
  createReviewDto: CreateReviewDto,
  signal?: AbortSignal,
) => {
  return customFetcher<void>({
    url: `/reviews/policy/${id}/review`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createReviewDto,
    signal,
  });
};

export const getReviewsControllerLeaveReviewMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reviewsControllerLeaveReview>>,
    TError,
    { id: string; data: CreateReviewDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof reviewsControllerLeaveReview>>,
  TError,
  { id: string; data: CreateReviewDto },
  TContext
> => {
  const mutationKey = ["reviewsControllerLeaveReview"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reviewsControllerLeaveReview>>,
    { id: string; data: CreateReviewDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return reviewsControllerLeaveReview(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReviewsControllerLeaveReviewMutationResult = NonNullable<
  Awaited<ReturnType<typeof reviewsControllerLeaveReview>>
>;
export type ReviewsControllerLeaveReviewMutationBody = CreateReviewDto;
export type ReviewsControllerLeaveReviewMutationError = unknown;

export const useReviewsControllerLeaveReview = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reviewsControllerLeaveReview>>,
      TError,
      { id: string; data: CreateReviewDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof reviewsControllerLeaveReview>>,
  TError,
  { id: string; data: CreateReviewDto },
  TContext
> => {
  const mutationOptions =
    getReviewsControllerLeaveReviewMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
